// Number of bits in character count indicator for QR Code
//
// INDICATORS's index        -> version
// INDICATORS                -> [indicators' bits in different version]
// INDICATORS[version]       -> [indicators' bits in different mode]
// INDICATORS[version][mode] -> indicator's bits
//
// version:
//     micro_mode:
//         M1 ~ M4 -> TODO
//     normal:
//         1  ~ 9  -> 0
//         10 ~ 26 -> 1
//         27 ~ 40 -> 2
//
// mode:
//     Numeric      -> 0
//     Alphanumeric -> 1
//     Byte         -> 2
//     Kanji        -> 3
//     Chinese      -> 4
pub const INDICATORS: [[u8; 5]; 3] = [
    [10, 9, 8, 8, 8],
    [12, 11, 16, 10, 10],
    [14, 13, 16, 12, 12],
];


// Number of data bits(Total Number of Data Codewords * 8) for this Version and EC Level
//
// CAPACITIES[version][ec_level] -> total number of data codewords for this Version and ec level
//
// version: same as above
//
// ec_levels:
//     L -> 0
//     M -> 1
//     Q -> 2
//     H -> 3
pub const CAPACITIES: [[u16; 4]; 40] = [
    [152, 128, 104, 72], [272, 224, 176, 128], [440, 352, 272, 208], [640, 512, 384, 288],
    [864, 688, 496, 368], [1088, 864, 608, 480], [1248, 992, 704, 528], [1552, 1232, 880, 688],
    [1856, 1456, 1056, 800], [2192, 1728, 1232, 976], [2592, 2032, 1440, 1120], [2960, 2320, 1648, 1264],
    [3424, 2672, 1952, 1440], [3688, 2920, 2088, 1576], [4184, 3320, 2360, 1784], [4712, 3624, 2600, 2024],
    [5176, 4056, 2936, 2264], [5768, 4504, 3176, 2504], [6360, 5016, 3560, 2728], [6888, 5352, 3880, 3080],
    [7456, 5712, 4096, 3248], [8048, 6256, 4544, 3536], [8752, 6880, 4912, 3712], [9392, 7312, 5312, 4112],
    [10208, 8000, 5744, 4304], [10960, 8496, 6032, 4768], [11744, 9024, 6464, 5024], [12248, 9544, 6968, 5288],
    [13048, 10136, 7288, 5608], [13880, 10984, 7880, 5960], [14744, 11640, 8264, 6344], [15640, 12328, 8920, 6760],
    [16568, 13048, 9368, 7208], [17528, 13800, 9848, 7688], [18448, 14496, 10288, 7888], [19472, 15312, 10832, 8432],
    [20528, 15936, 11408, 8768], [21616, 16816, 12016, 9136], [22496, 17728, 12656, 9776], [23648, 18672, 13328, 10208],
];


// EC Codewords Per Block
//
// version, ec_level: same as above
pub const EC_CW_PER_BLOCKS: [[u8; 4]; 40] = [
    [7, 10, 13, 17], [10, 16, 22, 28], [15, 26, 18, 22], [20, 18, 26, 16], [26, 24, 18, 22],
    [18, 16, 24, 28], [20, 18, 18, 26], [24, 22, 22, 26], [30, 22, 20, 24], [18, 26, 24, 28],
    [20, 30, 28, 24], [24, 22, 26, 28], [26, 22, 24, 22], [30, 24, 20, 24], [22, 24, 30, 24],
    [24, 28, 24, 30], [28, 28, 28, 28], [30, 26, 28, 28], [28, 26, 26, 26], [28, 26, 30, 28],
    [28, 26, 28, 30], [28, 28, 30, 24], [30, 28, 30, 30], [30, 28, 30, 30], [26, 28, 30, 30],
    [28, 28, 28, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30],
    [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30],
    [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30], [30, 28, 30, 30],
];

// Error Correction Code Words and Block Information
//
// DATA_DISTRIBUTION[version][ec_level] -> [
//     number of blocks in group 1,
//     number of data codewords in each of group 1's blocks,
//     number of blocks in group 2,
//     number of data codewords in each of group 2's blocks,
// ]
//
// version, ec_level: same as above
pub const DATA_DISTRIBUTIONS: [[[u8; 3]; 4]; 40] = [
    [[1, 19, 0], [1, 16, 0], [1, 13, 0], [1, 9, 0]],
    [[1, 34, 0], [1, 28, 0], [1, 22, 0], [1, 16, 0]],
    [[1, 55, 0], [1, 44, 0], [2, 17, 0], [2, 13, 0]],
    [[1, 80, 0], [2, 32, 0], [2, 24, 0], [4, 9, 0]],
    [[1, 108, 0], [2, 43, 0], [2, 15, 2], [2, 11, 2]],
    [[2, 68, 0], [4, 27, 0], [4, 19, 0], [4, 15, 0]],
    [[2, 78, 0], [4, 31, 0], [2, 14, 4], [4, 13, 1]],
    [[2, 97, 0], [2, 38, 2], [4, 18, 2], [4, 14, 2]],
    [[2, 116, 0], [3, 36, 2], [4, 16, 4], [4, 12, 4]],
    [[2, 68, 2], [4, 43, 1], [6, 19, 2], [6, 15, 2]],
    [[4, 81, 0], [1, 50, 4], [4, 22, 4], [3, 12, 8]],
    [[2, 92, 2], [6, 36, 2], [4, 20, 6], [7, 14, 4]],
    [[4, 107, 0], [8, 37, 1], [8, 20, 4], [12, 11, 4]],
    [[3, 115, 1], [4, 40, 5], [11, 16, 5], [11, 12, 5]],
    [[5, 87, 1], [5, 41, 5], [5, 24, 7], [11, 12, 7]],
    [[5, 98, 1], [7, 45, 3], [15, 19, 2], [3, 15, 13]],
    [[1, 107, 5], [10, 46, 1], [1, 22, 15], [2, 14, 17]],
    [[5, 120, 1], [9, 43, 4], [17, 22, 1], [2, 14, 19]],
    [[3, 113, 4], [3, 44, 11], [17, 21, 4], [9, 13, 16]],
    [[3, 107, 5], [3, 41, 13], [15, 24, 5], [15, 15, 10]],
    [[4, 116, 4], [17, 42, 0], [17, 22, 6], [19, 16, 6]],
    [[2, 111, 7], [17, 46, 0], [7, 24, 16], [34, 13, 0]],
    [[4, 121, 5], [4, 47, 14], [11, 24, 14], [16, 15, 14]],
    [[6, 117, 4], [6, 45, 14], [11, 24, 16], [30, 16, 2]],
    [[8, 106, 4], [8, 47, 13], [7, 24, 22], [22, 15, 13]],
    [[10, 114, 2], [19, 46, 4], [28, 22, 6], [33, 16, 4]],
    [[8, 122, 4], [22, 45, 3], [8, 23, 26], [12, 15, 28]],
    [[3, 117, 10], [3, 45, 23], [4, 24, 31], [11, 15, 31]],
    [[7, 116, 7], [21, 45, 7], [1, 23, 37], [19, 15, 26]],
    [[5, 115, 10], [19, 47, 10], [15, 24, 25], [23, 15, 25]],
    [[13, 115, 3], [2, 46, 29], [42, 24, 1], [23, 15, 28]],
    [[17, 115, 0], [10, 46, 23], [10, 24, 35], [19, 15, 35]],
    [[17, 115, 1], [14, 46, 21], [29, 24, 19], [11, 15, 46]],
    [[13, 115, 6], [14, 46, 23], [44, 24, 7], [59, 16, 1]],
    [[12, 121, 7], [12, 47, 26], [39, 24, 14], [22, 15, 41]],
    [[6, 121, 14], [6, 47, 34], [46, 24, 10], [2, 15, 64]],
    [[17, 122, 4], [29, 46, 14], [49, 24, 10], [24, 15, 46]],
    [[4, 122, 18], [13, 46, 32], [48, 24, 14], [42, 15, 32]],
    [[20, 117, 4], [40, 47, 7], [43, 24, 22], [10, 15, 67]],
    [[19, 118, 6], [18, 47, 31], [34, 24, 34], [20, 15, 61]]
];

lazy_static! {
    pub static ref ALIGNMENT_PATTERN_LOCATIONS: [&'static [u8]; 39] = [
        // version 2 ~ 6
        &[6, 18],
        &[6, 22],
        &[6, 26],
        &[6, 30],
        &[6, 34],
        // version 7 ~ 13
        &[6, 22, 38],
        &[6, 24, 42],
        &[6, 26, 46],
        &[6, 28, 50],
        &[6, 30, 54],
        &[6, 32, 58],
        &[6, 34, 62],
        // version 14 ~ 20
        &[6, 26, 46, 66],
        &[6, 26, 48, 60],
        &[6, 26, 50, 74],
        &[6, 30, 54, 78],
        &[6, 30, 56, 82],
        &[6, 30, 58, 86],
        &[6, 34, 62, 90],
        // version 21 ~ 27
        &[6, 28, 50, 72, 94],
        &[6, 26, 50, 74, 98],
        &[6, 30, 54, 78, 102],
        &[6, 28, 54, 80, 106],
        &[6, 32, 58, 84, 110],
        &[6, 30, 58, 86, 114],
        &[6, 34, 62, 90, 118],
        // version 28 ~ 34
        &[6, 26, 50, 74, 98, 122],
        &[6, 30, 54, 78, 102, 126],
        &[6, 26, 52, 78, 104, 130],
        &[6, 30, 56, 82, 108, 134],
        &[6, 34, 60, 86, 112, 138],
        &[6, 30, 58, 86, 114, 142],
        &[6, 34, 62, 90, 118, 146],
        // version 35 ~ 40
        &[6, 30, 54, 78, 102, 126, 150],
        &[6, 24, 50, 76, 102, 128, 154],
        &[6, 28, 54, 80, 106, 132, 158],
        &[6, 32, 58, 84, 110, 136, 162],
        &[6, 26, 54, 82, 110, 138, 166],
        &[6, 30, 58, 86, 114, 142, 170],
    ];  
}

pub fn alphanumeric_table(b: u8) -> u8 {
    match b {
        b'0'...b'9' => b - 48, // 48 = b'0'
        b'A'...b'Z' => b - 55, // 55 = b'A' - 10
        b' ' => 36,
        b'$' => 37,
        b'%' => 38,
        b'*' => 39,
        b'+' => 40,
        b'-' => 41,
        b'.' => 42,
        b'/' => 43,
        b':' => 44,
        _ => 0
    }
}

pub fn remainder_bits(version: usize) -> u8 {
    match version {
        2...6 => 7,
        14...20 | 28...34 => 3,
        21...27 => 4,
        _ => 0
    }
}
